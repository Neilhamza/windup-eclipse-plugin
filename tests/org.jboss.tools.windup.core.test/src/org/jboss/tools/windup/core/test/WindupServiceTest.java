/*******************************************************************************
* Copyright (c) 2013 Red Hat, Inc.
* Distributed under license by Red Hat, Inc. All rights reserved.
* This program is made available under the terms of the
* Eclipse Public License v1.0 which accompanies this distribution,
* and is available at http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   Red Hat, Inc. - initial API and implementation
******************************************************************************/
package org.jboss.tools.windup.core.test;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.plaf.SliderUI;

import org.apache.commons.io.FileUtils;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import org.jboss.tools.test.util.TestProjectProvider;
import org.jboss.tools.windup.core.IWindupReportListener;
import org.jboss.tools.windup.core.WindupCorePlugin;
import org.jboss.tools.windup.core.WindupService;
import org.junit.After;
import org.junit.Assert;
import org.junit.Test;

/**
 * <p>
 * Tests for the {@link WindupService}.
 * </p>
 */
public class WindupServiceTest {
	
	@After
	public void cleanUpGeneratedReports() throws IOException, InterruptedException {
		//delete any reports generated by the test
		System.gc();
		File reportsDir = WindupCorePlugin.getDefault().getStateLocation().append("reports").toFile();
		FileUtils.deleteDirectory(reportsDir);
	}
	
	@Test
	public void testGetReportLocation_ReportNotGenerated() throws CoreException {
		TestProjectProvider provider = new TestProjectProvider(
				WindupCoreTestPlugin.PLUGIN_ID, null, "Portal-WAR", false);
		IProject project = provider.getProject();
		
		IFile jspFile = project.getFile(new Path("WebContent/WebContent/Portal.jsp"));
		IPath reportLocation = WindupService.getDefault().getReportLocation(jspFile);
		
		Assert.assertNull("Report location should be null for a resource in a "
				+ "project who's Windup report has not been generated", reportLocation);
	}
	
	@Test
	public void testGetReportLocation_ReportGenerated_ResourceDoesNotHaveReportResource() throws CoreException {
		TestProjectProvider provider = new TestProjectProvider(
				WindupCoreTestPlugin.PLUGIN_ID, null, "Portal-WAR", false);
		IProject project = provider.getProject();
		
		IFile folder = project.getFile(new Path("WebContent/WebContent"));
		IPath reportLocation = WindupService.getDefault().getReportLocation(folder);
		
		Assert.assertNull("Report location should be null for a resource that "
				+ "does not have a corisponding Windup report resource", reportLocation);
	}
	
	@Test
	public void testGenerateReport() throws CoreException {
		TestProjectProvider provider = new TestProjectProvider(
				WindupCoreTestPlugin.PLUGIN_ID, null, "Portal-WAR", false);
		IProject project = provider.getProject();
		
		WindupService.getDefault().generateReport(project, null);
		
		//test that the report home file exists
		IPath reportHomeLocation = WindupService.getDefault().getReportLocation(project);
		File reportHomeFile = reportHomeLocation.toFile();
		Assert.assertTrue("The index.html for the generated report should exist.", reportHomeFile.exists());
		
		//test that a report file exists for JSP file
		IFile jspFile = project.getFile(new Path("WebContent/WebContent/Portal.jsp"));
		IPath jspReportLocation = WindupService.getDefault().getReportLocation(jspFile);
		File jspReportFile = jspReportLocation.toFile();
		Assert.assertTrue("A report resource should exist for " + jspFile, jspReportFile.exists());
	}
	
	@Test
	public void testReportExists() throws CoreException {
		TestProjectProvider provider = new TestProjectProvider(
				WindupCoreTestPlugin.PLUGIN_ID, null, "Portal-WAR", false);
		IProject project = provider.getProject();
		
		WindupService.getDefault().generateReport(project, null);
		
		boolean reportExists = WindupService.getDefault().reportExists(project);
		Assert.assertTrue("WindupService should report that the windup report exists for the given project.", reportExists);
	}
	
	@Test
	public void testAddWindupReportListener() throws CoreException {
		TestProjectProvider provider = new TestProjectProvider(
				WindupCoreTestPlugin.PLUGIN_ID, null, "Portal-WAR", false);
		final IProject project = provider.getProject();
	
		final List<IProject> notifiedProjects = new ArrayList<IProject>();
		
		WindupService.getDefault().addWindupReportListener(new IWindupReportListener() {
			@Override
			public void reportGenerated(IProject reportGeneratedForProject) {
				notifiedProjects.add(reportGeneratedForProject);
			}
		});
		
		WindupService.getDefault().generateReport(project, null);
		
		Assert.assertTrue("Listener was not notified of report generation for the project.",
				notifiedProjects.contains(project));
	}
	
	@Test
	public void testRemoveWindupReportListener() throws CoreException {
		TestProjectProvider provider = new TestProjectProvider(
				WindupCoreTestPlugin.PLUGIN_ID, null, "Portal-WAR", false);
		final IProject project = provider.getProject();
	
		final List<IProject> notifiedProjects = new ArrayList<IProject>();
		
		IWindupReportListener listener = new IWindupReportListener() {
			@Override
			public void reportGenerated(IProject reportGeneratedForProject) {
				notifiedProjects.add(reportGeneratedForProject);
			}
		};
		
		WindupService.getDefault().addWindupReportListener(listener);
		WindupService.getDefault().removeWindupReportListener(listener);
		
		WindupService.getDefault().generateReport(project, null);
		
		Assert.assertTrue("Listener should not have been notified of report generation.",
				notifiedProjects.isEmpty());
	}
}
